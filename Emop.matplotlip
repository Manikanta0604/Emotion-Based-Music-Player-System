 import matplotlib.pyplot as plt
 import numpy as np
 from tensorflow.keras.models import Sequential
 from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
 from tensorflow.keras.optimizers import Adam
 from tensorflow.keras.preprocessing.image import ImageDataGenerator
 52
def plot_model_history(model_history):
 """
 Plot Accuracy and Loss curves given the model_history
 """
 fig, axs = plt.subplots(1, 2, figsize=(15, 5))
 # summarize history for accuracy
 axs[0].plot(range(1, len(model_history.history['accuracy']) + 1),
 model_history.history['accuracy'])
 axs[0].plot(range(1, len(model_history.history['val_accuracy']) + 1),
 model_history.history['val_accuracy'])
 axs[0].set_title('Model Accuracy')
 axs[0].set_ylabel('Accuracy')
 axs[0].set_xlabel('Epoch')
 axs[0].set_xticks(np.arange(1, len(model_history.history['accuracy']) + 1),
 len(model_history.history['accuracy']) / 10)
 axs[0].legend(['train', 'val'], loc='best')
 # summarize history for loss
 axs[1].plot(range(1, len(model_history.history['loss']) + 1),
 model_history.history['loss'])
 axs[1].plot(range(1, len(model_history.history['val_loss']) + 1),
 model_history.history['val_loss'])
 axs[1].set_title('Model Loss')
 axs[1].set_ylabel('Loss')
 axs[1].set_xlabel('Epoch')
 axs[1].set_xticks(np.arange(1, len(model_history.history['loss']) + 1),
 len(model_history.history['loss']) / 10)
 axs[1].legend(['train', 'val'], loc='best')
 fig.savefig('plot.png')
 plt.show()
 # Define data generators
 train_dir = 'data/train'
 val_dir = 'data/test'
 53
num_train = 28709
 num_val = 7178
 batch_size = 64
 num_epoch = 80
 train_datagen = ImageDataGenerator(rescale=1./255)
 val_datagen = ImageDataGenerator(rescale=1./255)
 train_generator = train_datagen.flow_from_directory(
 train_dir,
 target_size=(48, 48),
 batch_size=batch_size,
 color_mode="grayscale",
 class_mode='categorical')
 validation_generator = val_datagen.flow_from_directory(
 val_dir,
 target_size=(48, 48),
 batch_size=batch_size,
 color_mode="grayscale"
